name: Test code

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
      - uses: pre-commit/action@v3.0.1

  test_code:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 12
      matrix:
        plugin: [femwell, gmsh, meow, sax, tidy3d, klayout, vlsir, path_length_analysis]
        os: [ubuntu-latest]
        python-version: [3.12]
        exclude:
          - plugin: femwell
            os: macos-latest
          - plugin: femwell
            os: windows-latest
          - plugin: sax
            python-version: 3.13

    name: Test ${{ matrix.plugin }} ${{ matrix.os }} ${{ matrix.python-version }}
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get install -y libglu1-mesa
      - name: Install dependencies
        run: |
          uv venv -p ${{ matrix.python-version }}
          uv pip install .[${{ matrix.plugin }},dev] setuptools
          make test-data
      - name: Test with pytest
        run: |
          uv run pytest gplugins/${{ matrix.plugin }}

  test_meep:
    runs-on: ubuntu-latest
    name: Test meep ubuntu-latest 3.11
    steps:
      - uses: actions/checkout@v5
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: 3.11
      - name: Install libglu1-mesa
        run: |
          sudo apt-get install -y libglu1-mesa
      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda create -n mp python=3.11 -y
          conda activate mp
          conda install -c conda-forge pymeep pymeep-extras gdsfactory -y
          pip install .[meep,dev] setuptools
          pip install "numpy<2.0"
          make test-data
      - name: Test with pytest
        shell: bash -l {0}
        run: |
          conda activate mp
          pytest gplugins/gmeep

  test_palace:
    runs-on: ubuntu-latest
    name: Test palace ubuntu-latest 3.11
    steps:
      - uses: actions/checkout@v4
      - uses: astral-sh/setup-uv@v6
      - name: Setup Apptainer
        uses: eWaterCycle/setup-apptainer@v2
        with:
          apptainer-version: 1.4.2
      - name: Install libglu1-mesa
        run: |
          sudo apt-get install -y libglu1-mesa
      - name: Cache Palace container
        id: cache-palace
        uses: actions/cache@v4
        with:
          path: palace.sif
          key: palace-container-v1-${{ runner.os }}
          restore-keys: |
            palace-container-v1-
      - name: Try to pull pre-built Palace container or build from source
        if: steps.cache-palace.outputs.cache-hit != 'true'
        run: |
          # First try to pull a pre-built container from various sources
          echo "Attempting to pull pre-built Palace container..."

          # Try different registries and tags
          CONTAINER_FOUND=false

          # Try GitHub Container Registry
          if apptainer pull palace.sif docker://ghcr.io/awslabs/palace:latest 2>/dev/null; then
            echo "Successfully pulled palace from GitHub Container Registry"
            CONTAINER_FOUND=true
          # Try Docker Hub awslabs
          elif apptainer pull palace.sif docker://awslabs/palace:latest 2>/dev/null; then
            echo "Successfully pulled palace from Docker Hub awslabs"
            CONTAINER_FOUND=true
          # Try the original benvial image that was in the config
          elif apptainer pull palace.sif docker://benvial/palace:latest 2>/dev/null; then
            echo "Successfully pulled palace from benvial/palace:latest"
            CONTAINER_FOUND=true
          elif apptainer pull palace.sif docker://benvial/palace:dev 2>/dev/null; then
            echo "Successfully pulled palace from benvial/palace:dev"
            CONTAINER_FOUND=true
          fi

          if [ "$CONTAINER_FOUND" = "false" ]; then
            echo "No pre-built container found, downloading singularity definition..."
            wget https://raw.githubusercontent.com/awslabs/palace/main/singularity/singularity.def

            # Try to build but with a reasonable timeout (build can take 30+ minutes)
            echo "Building Palace container from source (this may take a while)..."
            echo "Note: This is a one-time build that will be cached for future runs"
            timeout 1800 apptainer build palace.sif singularity.def || {
              echo "Build timed out or failed after 30 minutes. Palace tests will be skipped."
              touch .palace_build_failed
            }
          fi
      - name: Create palace alias
        run: |
          if [[ -f palace.sif ]]; then
            # Create a shell script that acts as an alias for palace
            echo '#!/bin/bash' > palace
            echo 'exec apptainer run "$PWD/palace.sif" "$@"' >> palace
            chmod +x palace
            # Add to PATH
            echo "$PWD" >> $GITHUB_PATH
            echo "Palace executable created successfully"
          else
            echo "Palace container not available, tests will be skipped"
          fi
      - name: Verify Palace installation
        run: |
          if [[ -f palace.sif ]]; then
            palace --help || echo "Palace help failed but container exists"
          else
            echo "Palace not available for testing"
          fi
      - name: Install dependencies
        run: |
          uv venv -p 3.11
          uv pip install .[gmsh,dev]
      - name: Test with pytest
        run: |
          # Run tests with conditional skipping if Palace is not available
          if [[ ! -f palace.sif ]] || [[ -f .palace_build_failed ]]; then
            echo "Palace not available, running tests with Palace marked as unavailable"
            export PALACE_AVAILABLE=false
          else
            export PALACE_AVAILABLE=true
          fi
          uv run pytest gplugins/palace -v


  test_code_coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Install libglu1-mesa
        run: |
          sudo apt-get install -y libglu1-mesa
      - name: Install dependencies
        run: |
          make install test-data
      - name: Test with pytest
        run: |
          make cov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
