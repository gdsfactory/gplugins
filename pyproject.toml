# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html

[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core >=3.2,<4"]

[project]
authors = [{name = "gdsfactory", email = "contact@gdsfactory.com"}]
classifiers = [
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent"
]
dependencies = [
  "gdsfactory>=9.3.5",
  "pint",
  "tqdm",
  "numpy",
  "xarray==2025.1.2"
]
description = "gdsfactory plugins"
keywords = ["python"]
license = {file = "LICENSE"}
name = "gplugins"
readme = "README.md"
requires-python = ">=3.11"
version = "1.3.4"

[project.optional-dependencies]
dev = [
  "pre-commit",
  "pytest",
  "pytest-cov",
  "pytest_regressions",
  "pyswarms"
]
devsim = ["devsim", "pyvista<=0.43.8", "tidy3d>=2.8.2,<2.9"]
docs = ["jupytext", "matplotlib", "jupyter-book~=1.0", "pyvista[all]<=0.43.8", "bokeh"]
femwell = ["femwell~=0.1.11", "meshwell~=1.0.7"]
gfviz = ["jinja2", "fastapi", "shapely", "natsort"]
gmsh = [
  "gmsh==4.13.0",
  "h5py",
  "mapbox_earcut",
  "meshio",
  "pygmsh",
  "pyvista<=0.43.8",
  "trimesh",
  "shapely",
  "meshwell~=1.0.7"
]
klayout = ["klayout", "pyvis<=0.3.1", "vlsir", "vlsirtools"]
luminescent = ["luminescent>=0.2.12,<0.4.0", "sortedcontainers"]
maintainer = ["mypy", "tbump", "towncrier"]
meow = [
  "jax>=0.4.26",
  "jaxlib>=0.4.26",
  "flax>=0.8.2",
  "meow-sim>=0.13,<0.14",
  "tidy3d>=2.8.2,<2.9"
]
sax = [
  "jax>=0.4.26",
  "jaxlib>=0.4.26",
  "flax>=0.8.2",
  "sax>=0.13.1,<0.15.0",
  "scikit-learn",
  "pyvis<=0.3.1",
  "ray"
]
schematic = ["bokeh", "ipywidgets", "natsort"]
tidy3d = ["tidy3d>=2.8.2,<2.9", "meshio", "numpy", "meshwell~=1.0.7", "gdstk"]
vlsir = ["vlsir", "vlsirtools"]

[tool.codespell]
ignore-words-list = 'te, te/tm, te, ba, fpr, fpr_spacing, ro, nd, donot, schem, Ue'
skip = 'notebooks/palace_02_fullwave.ipynb'

[tool.mypy]
python_version = "3.11"
strict = true

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = true

[tool.pyright]
reportUnusedExpression = false

[tool.pytest.ini_options]
addopts = "--assert=plain"
norecursedirs = [
  "extra/*.py",
  'gplugins/devsim',
  'gplugins/sax/integrations',
  'gplugins/tidy3d/tests/tests_sparameters',
  'gplugins/fdtdz',
  'gplugins/elmer',
  'gplugins/sentaurus',
  'gplugins/gfviz',
  'gplugins/gmeep',
  'gplugins/modes'
]
python_files = ["gplugins/*.py", "notebooks/*.ipynb", "tests/*.py"]
testpaths = ["gplugins/", "tests"]

[tool.ruff]
fix = true

[tool.ruff.lint]
ignore = [
  "B008",  # do not perform function calls in argument defaults
  "B028",  # stacklevel
  "B904",
  "B905",  # `zip()` without an explicit `strict=` parameter
  "C408",  # C408 Unnecessary `dict` call (rewrite as a literal)
  "C901",  # too complex
  "D100",  # public module docstrings
  "D101",  # public class docstrings
  "D102",  # public method docstrings
  "D103",  # public function docstrings
  "D104",  # public package docstrings
  "E501",  # line too long, handled by black
  "RUF005",  # Consider {expression} instead of concatenation
  "ANN401",  # typing.Any is not allowed
  "RUF015"  # Using next() instead of [0]
]
select = [
  "B",  # flake8-bugbear
  "C",  # flake8-comprehensions
  "D",  # pydocstyle
  "E",  # pycodestyle errors
  "F",  # pyflakes
  "I",  # isort
  "T10",  # flake8-debugger
  "UP",  # pyupgrade
  "W",  # pycodestyle warnings
  "PERF",  # performance improvements
  "RUF",  # ruff
  # "ANN",  # flake8-annotations
  "UP007",
  "UP035",
  "UP"  # pyupgrade
]

[tool.ruff.lint.per-file-ignores]
"docs/notebooks/*.py" = ["F821", 'E402', 'F405', 'F403']
"docs/notebooks/meep_01_sparameters.py" = ["F821", 'E402']
"docs/notebooks/tcad_02_analytical_process.py" = [
  "F821",
  'E402',
  'F405',
  'F403'
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools.package-data]
mypkg = ["*.csv", "*.yaml"]

[tool.setuptools.packages]
find = {}

[tool.tbump]

[[tool.tbump.before_commit]]
cmd = "towncrier build --yes --version {new_version}"
name = "create & check changelog"

[[tool.tbump.before_commit]]
cmd = "git add CHANGELOG.md"
name = "create & check changelog"

[[tool.tbump.before_commit]]
cmd = "grep -q -F {new_version} CHANGELOG.md"
name = "create & check changelog"

[[tool.tbump.file]]
src = "README.md"

[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "gplugins/__init__.py"

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

[tool.tbump.version]
current = "1.3.4"
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.towncrier]
directory = ".changelog.d"
filename = "CHANGELOG.md"
issue_format = "[#{issue}](https://github.com/gdsfactory/gplugins/issues/{issue})"
start_string = "<!-- towncrier release notes start -->\n"
template = ".changelog.d/changelog_template.jinja"
title_format = "## [{version}](https://github.com/gdsfactory/gplugins/releases/tag/v{version}) - {project_date}"
underlines = ["", "", ""]

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true
